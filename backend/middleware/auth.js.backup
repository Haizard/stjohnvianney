const jwt = require('jsonwebtoken');
const Teacher = require('../models/Teacher');
const Class = require('../models/Class');
const mongoose = require('mongoose');

const authenticateToken = (req, res, next) => {
  console.log('Authenticating token...');

  // Check for token in authorization header
  const authHeader = req.headers['authorization'] || req.headers['Authorization'];
  console.log('Auth header:', authHeader);

  // Check for token in query parameters (for PDF downloads)
  const queryToken = req.query.token;
  console.log('Query token:', queryToken);

  // Get token from header or query parameter
  let token;
  if (authHeader) {
    token = authHeader.split(' ')[1];
  } else if (queryToken) {
    token = queryToken;
  }

  if (!token) {
    console.log('No token found in auth header or query parameters');
    return res.status(401).json({ message: 'Authentication required' });
  }

  try {
    // Use a consistent JWT secret key with a fallback
    const jwtSecret = process.env.JWT_SECRET || 'kjjf6565i87utgfu64erd';
    console.log('Using JWT secret:', jwtSecret ? 'Secret is set' : 'Using fallback secret');
    console.log('JWT_SECRET from env:', process.env.JWT_SECRET);

    const decoded = jwt.verify(token, jwtSecret);
    console.log('Token verified successfully for user:', decoded);
    req.user = decoded;
    next();
  } catch (error) {
    console.error('Token verification failed:', error.message);
    return res.status(403).json({ message: 'Invalid token' });
  }
};

const authorizeRole = (roles) => {
  return (req, res, next) => {
    console.log('Authorizing role...');
    console.log('User:', req.user);
    console.log('Required roles:', roles);

    // Convert to array if a single role is provided
    if (!Array.isArray(roles)) {
      roles = [roles];
    }

    // Check if user and role exist
    if (!req.user) {
      console.log('User not found in request');
      return res.status(401).json({ message: 'Authentication required' });
    }

    if (!req.user.role) {
      console.log('User role not found in request');
      return res.status(403).json({ message: 'Unauthorized: User role not found' });
    }

    // Normalize roles for case-insensitive comparison
    const userRole = req.user.role.toLowerCase();
    const normalizedRoles = roles.map(role => role.toLowerCase());

    // Check if user's role is in the required roles
    if (!normalizedRoles.includes(userRole)) {
      console.log(`User role ${userRole} not in required roles:`, normalizedRoles);
      return res.status(403).json({
        message: `Unauthorized: Required role(s): ${roles.join(', ')}, your role: ${req.user.role}`
      });
    }

    console.log('Authorization successful for role:', req.user.role);
    next();
  };
};

// Middleware to check if a teacher is authorized to access a specific subject
const authorizeTeacherForSubject = async (req, res, next) => {
  try {
    // Check if user is a teacher
    if (req.user.role !== 'teacher') {
      return res.status(403).json({ message: 'Only teachers can access this resource' });
    }

    const { subjectId } = req.params;
    if (!subjectId) {
      return res.status(400).json({ message: 'Subject ID is required' });
    }

    // Find the teacher by userId
    const teacher = await Teacher.findOne({ userId: req.user.userId });
    if (!teacher) {
      return res.status(404).json({ message: 'Teacher profile not found' });
    }

    // Check if teacher is assigned to this subject
    if (!teacher.subjects.some(subject => subject.toString() === subjectId)) {
      return res.status(403).json({ message: 'You are not authorized to access this subject' });
    }

    // Add teacher ID to request for convenience in route handlers
    req.teacherId = teacher._id;
    next();
  } catch (error) {
    console.error('Error in authorizeTeacherForSubject middleware:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// Middleware to check if a teacher is authorized to access a specific class
const authorizeTeacherForClass = async (req, res, next) => {
  try {
    // Check if user is a teacher
    if (req.user.role !== 'teacher') {
      return res.status(403).json({ message: 'Only teachers can access this resource' });
    }

    const { classId } = req.params;
    if (!classId) {
      return res.status(400).json({ message: 'Class ID is required' });
    }

    // Find the teacher by userId
    const teacher = await Teacher.findOne({ userId: req.user.userId });
    if (!teacher) {
      return res.status(404).json({ message: 'Teacher profile not found' });
    }

    // Check if teacher is assigned to this class
    const classItem = await Class.findById(classId);
    if (!classItem) {
      return res.status(404).json({ message: 'Class not found' });
    }

    const isTeacherAssigned = classItem.subjects.some(subject =>
      subject.teacher && subject.teacher.toString() === teacher._id.toString()
    );

    if (!isTeacherAssigned) {
      return res.status(403).json({ message: 'You are not authorized to access this class' });
    }

    // Add teacher ID to request for convenience in route handlers
    req.teacherId = teacher._id;
    next();
  } catch (error) {
    console.error('Error in authorizeTeacherForClass middleware:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

module.exports = {
  authenticateToken,
  authorizeRole,
  authorizeTeacherForSubject,
  authorizeTeacherForClass
};
